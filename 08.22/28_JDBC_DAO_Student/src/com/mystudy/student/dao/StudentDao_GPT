package com.mystudy.student.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import com.mystudy.student.vo.StudentVO;

// XxxxDAO, XxxxDao: 데이터 액세스 오브젝트
// 데이터베이스와 연동해서 CRUD 작업을 구현하는 클래스
// 데이터베이스와 연동해서 CRUD 작업을 수행할 수 있는 기능을 제공하는 클래스
public class StudentDAO {
	private static final String DRIVER = "oracle.jdbc.OracleDriver";
	private static final String URL = "jdbc:oracle:thin:@localhost:1521:xe";
	private static final String USER = "mystudy";
	private static final String PASSWORD = "mystudypw";

	// static 초기화 블록
	static {
		// 1. JDBC 드라이버 로딩
		try {
			Class.forName(DRIVER);
			System.out.println(">> JDBC 드라이버 로딩 성공");
		} catch (ClassNotFoundException e) {
			System.out.println("[예외발생] JDBC 드라이버 로딩 실패!!!");
		}
	}
	
	// SELECT: 학생 정보 1개 조회 (id 기반) - selectOne: StudentVO
	public StudentVO selectOne(String id) {
		StudentVO vo = null;
		
		// 데이터베이스 연결 및 SQL 실행 결과를 vo 변수에 저장하고 반환
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			// 2. 데이터베이스 연결 - Connection 객체 생성 <- DriverManager
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			// 3. SQL 문 실행 - PreparedStatement 객체 생성
			StringBuilder sb = new StringBuilder();
			sb.append("SELECT ID, NAME, KOR, ENG, MATH, TOT, AVG ");
			sb.append("FROM STUDENT ");
			sb.append("WHERE ID = ? ");
			
			pstmt = conn.prepareStatement(sb.toString());
			
			pstmt.setString(1, id);
			
			rs = pstmt.executeQuery();
			
			// 4. SQL 실행 결과 처리
			//    - SELECT: 조회(검색) 데이터 결과 값에 대한 처리
			if (rs.next()) {
				vo = new StudentVO(
						rs.getString("ID"),
						rs.getString("NAME"), 
						rs.getInt("KOR"), 
						rs.getInt("ENG"), 
						rs.getInt("MATH"),
						rs.getInt("TOT"),
						rs.getDouble("AVG"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			// 5. 자원 반환을 위한 클로징 처리
			close(conn, pstmt, rs);
		}
		
		return vo;
	}
	
	// SELECT: 학생 정보 1개 조회 (VO 기반) - selectOne: StudentVO
	public StudentVO selectOne(StudentVO student) {
		return selectOne(student.getId());		
	}
	
	private void close(Connection conn, PreparedStatement pstmt, 
			ResultSet rs) {
		// 5. 클로징 처리를 통한 자원 반환
		try {
			if (rs != null) rs.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		try {
			if (pstmt != null) pstmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		try {
			if (conn != null) conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	private void close(Connection conn, PreparedStatement pstmt) {
		// 5. 클로징 처리를 통한 자원 반환
		try {
			if (pstmt != null) pstmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		try {
			if (conn != null) conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	// SELECT: 모든 학생 정보 조회 - selectAll: List<StudentVO>
	public List<StudentVO> selectAll() {
		List<StudentVO> list = null;
		
		// 아직 구현되지 않음
		
		return list;
	}
	
	// SELECT: 이름으로 학생 정보 조회 - select: List<StudentVO>
	
	// INSERT: 학생 정보 입력 - insert: int
	public int insert(StudentVO vo) {
		int result = 0;
		
		// 아직 구현되지 않음
		
		return result;
	}
	
	// UPDATE: 학생 정보 수정 - update: int
	// - UPDATE: 이름(name) 수정 - updateName: int
	// - UPDATE: 국어 점수(kor) 수정 - updateKor: int
	// - UPDATE: 총점과 평균 계산 처리 - updateTotAvg: int
	
	// DELETE: 학생 정보 삭제 - delete: int
	// DELETE: 학생 ID를 통한 정보 삭제 - delete: int
}
